buildscript {
    ext {
    	env = project.hasProperty('deployEnv') ? project['deployEnv'] : 'dev'
        //env = 'dev'
        relWebDir = 'main/resources/static/js'
        buildWebDir = "${buildDir}/${relWebDir}"
        prodName = 'o6'
    	prodVersion = '0.0.1-SNAPSHOT'
        
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}") 
        classpath("io.spring.gradle:dependency-management-plugin:0.5.3.RELEASE")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse-wtp'
apply plugin: 'spring-boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'war'

jar {
    baseName = "${prodName}"
    version = "${prodVersion}"
	
	exclude('**/static/js/*')
	from("${buildWebDir}") {
        include 'all.js'
        into('static/js')
    }
}

war {
    baseName = "${prodName}"
    version = "${prodVersion}"
	
	rootSpec.exclude('**/static/js/*')
	webInf {
		from("${buildWebDir}") {
	        include 'all.js'
	        into('static/js')
	    }
	}
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

configurations {
    providedRuntime
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter-aop")
    compile("org.springframework.boot:spring-boot-starter-data-mongodb")
    compile("org.springframework.boot:spring-boot-starter-jdbc")
    compile("org.springframework.boot:spring-boot-starter-mail")
    compile("org.springframework.boot:spring-boot-starter-mustache")
    compile("org.springframework.boot:spring-boot-starter-security")
    compile("org.springframework.boot:spring-boot-starter-social-facebook")
    compile("org.springframework.boot:spring-boot-starter-social-linkedin")
    compile("org.springframework.boot:spring-boot-starter-social-twitter")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-websocket")
    compile("org.springframework.boot:spring-boot-starter-ws")
    compile("org.apache.commons:commons-lang3:3.1")
    compile project(':commonData')
    
    runtime("org.hsqldb:hsqldb")
    runtime("mysql:mysql-connector-java")
    providedRuntime("org.springframework.boot:spring-boot-starter-tomcat")

    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("com.jayway.jsonpath:json-path")
}


eclipse {
    classpath {
         containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
         containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}

task buildJsConfig(type: Exec) {
    if (env == 'prod') {
        commandLine 'npm', 'run', 'build-config-prod';
    } else {
        commandLine 'npm', 'run', 'build-config'
    }
}

task buildjs(type: Exec) {
    if (env == 'prod') {
        commandLine 'npm', 'run', 'build-min'
    } else {
        commandLine 'npm', 'run', 'build'
    }
}

tasks.buildjs.dependsOn(buildJsConfig)
tasks.jar.dependsOn(buildjs)
tasks.war.dependsOn(buildjs)